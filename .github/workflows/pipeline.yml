name: pipeline

on:
  push:
  workflow_dispatch:

jobs:
  test:
    name: Run tests (container)
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v4

      - name: Build test image
        run: |
          docker build -f ./Library-Manager/test.Dockerfile -t ricardo_test_container ./Library-Manager

      - name: Run tests inside container
        run: |
          docker run --rm ricardo_test_container

  build_and_deploy:
    name: Build, push image and deploy (needs tests)
    needs: test
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: build and push to docker hub
        run: |
          docker build -t happystar91/advanced-web-final-kubernetes:${{github.run_number}} ./Library-Manager
          docker push happystar91/advanced-web-final-kubernetes:${{github.run_number}}

      - name: deploy to kubernetes
        shell: pwsh
        run: |
          $env:BUILD_NUMBER = "${{ github.run_number }}"

          $workspace = $env:GITHUB_WORKSPACE
          Write-Host "GITHUB_WORKSPACE=${workspace}"
          $candidates = @(
            Join-Path $workspace 'kube',
            Join-Path $workspace 'Library-Manager\kube',
            Join-Path (Get-Location) 'kube'
          )

          $kubePath = $null
          foreach ($cand in $candidates) {
            if (Test-Path $cand) { $kubePath = $cand; break }
          }

          Write-Host "Attempting to use kube path: $kubePath"
          if (-not $kubePath) {
            Write-Host "ERROR: kube directory not found in any of the candidate locations:"; $candidates | ForEach-Object { Write-Host "  $_" }
            Write-Host "Listing current directory:"; Get-ChildItem -Force | ForEach-Object { Write-Host "  $_" }
            throw "kube directory not found. Aborting deploy step."
          }

          Write-Host "Listing kube directory contents:"; Get-ChildItem -Path $kubePath -File | ForEach-Object { Write-Host $_.FullName }

          Get-ChildItem -Path $kubePath -File | ForEach-Object {
            $content = Get-Content -Raw $_.FullName
            $content = $content -replace '\$\{BUILD_NUMBER\}', $env:BUILD_NUMBER
            $content | kubectl apply -f -
          }